package pcd_practica8;

import java.util.Random;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/**
 *
 * @author Grefuwan
 */
public class JFrame_Generador extends javax.swing.JFrame {

    /**
     * Creates new form JFrame_Generador
     */
    public JFrame_Generador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 797, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 542, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException, ExecutionException {

        int ancho = 1200, alto = 800;
        int numHilos = 50, numTurnoAleatorio;
        int tamaThrPool = 10;
        int tiempoEspera = 500; //500ms
        int tiempoTotal = 0;

        Random r = new Random();
        CanvasTienda cv = new CanvasTienda(ancho, alto);

        Tienda tienda = new Tienda(cv);
        JFrame_Generador frame = new JFrame_Generador();
        frame.setSize(ancho, alto);
        frame.add(cv);
        frame.setVisible(true);

        //Cada hilo devuelve el nÂº de segundos empleados en ser atendido
        ExecutorService thpCompradores = Executors.newFixedThreadPool(tamaThrPool);
        ExecutorService thpReparadores = Executors.newFixedThreadPool(tamaThrPool);

        Future<Integer>[] fTiempos = new Future[numHilos];

        for (int i = 0; i < numHilos; i++) {
            try {
                numTurnoAleatorio = r.nextInt(10) + 1;
                if (numTurnoAleatorio <= 5) {   //ClienteComprador
                    fTiempos[i] = thpCompradores.submit(new Cliente_Comprador(i, tienda, cv));
                    Thread.sleep(tiempoEspera);
                }
                else {  //ClienteReparador
                    fTiempos[i] = thpReparadores.submit(new Cliente_Reparador(i, tienda, cv));
                    Thread.sleep(tiempoEspera);
                }
            } catch (Exception e) {
                System.out.println("ERROR: BUCLE COMPRADORES REPARADORES");
            }
        }
        
        for (int i = 0; i < numHilos; i++) {
            tiempoTotal += fTiempos[i].get();
        }
        
        thpCompradores.shutdown();
        thpReparadores.shutdown();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

