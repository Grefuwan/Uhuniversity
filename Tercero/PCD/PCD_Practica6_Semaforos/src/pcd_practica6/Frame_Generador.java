package pcd_practica6;

import static java.lang.Thread.sleep;
import java.util.Random;
import java.util.concurrent.Semaphore;

/**
 *
 * @author Grefuwan
 */
public class Frame_Generador extends java.awt.Frame {

    /**
     * Creates new form Frame_Generador
     */
    public Frame_Generador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     * @throws java.lang.Exception
     */
    public static void main(String args[]) throws Exception {
        int numViajeros = 20;
        Random rTiempo = new Random();
        int probViajeros;

        Semaphore rayosMaleta = new Semaphore(2);   //Hay 2 maquinas para equipaje de maleta
        Semaphore rayosMano = new Semaphore(1);     //Hay 1 maquina para equipaje de mano
        Semaphore galleta = new Semaphore(1);       //Como hay 1 cuidador, le da 1 galleta a la vez
        Semaphore perro = new Semaphore(2);         //Hay 2 perros

        Frame_Generador generador = new Frame_Generador();
        generador.setSize(1280, 720);
        
        MiCanvas cv = new MiCanvas(generador.getWidth(), generador.getHeight());
        generador.add(cv);
        
        generador.setVisible(true);
        
        Thread[] Viajeros = new Thread[numViajeros];
        Cuidador cuidaPerros = new Cuidador(cv, galleta, perro);
        
        cuidaPerros.start();
        System.out.println("El Cuidador llega");
                
        for (int i = 0; i < numViajeros; i++) {
            sleep(1000);
            
            probViajeros = rTiempo.nextInt(10) + 1;
            
            if (probViajeros <= 3) {    //Probabilidad ViajeroMano 30%
                Viajeros[i] = new Thread(new ViajeroMano(i, cv, rayosMano, galleta, perro));
                System.out.println("Viajero Mano " + i + " ha llegado");
            }
            else {  //Probabilidad ViajeroMaleta 70%
                Viajeros[i] = new ViajeroMaleta(i, cv, rayosMaleta, galleta, perro);
                System.out.println("Viajero Maleta " + i + " ha llegado");
            }
            Viajeros[i].start();
        }
        
        for (int i = 0; i < numViajeros; i++) {
            Viajeros[i].join();
            System.out.println("Viajero " + i + " se va");
        }
        cuidaPerros.join();
        System.out.println("El Cuidador se va");

        //Llegan los viajeros Maleta y Mano
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

